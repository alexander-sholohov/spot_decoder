Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 7579)
+++ CMakeLists.txt	(working copy)
@@ -738,10 +738,10 @@
 #
 # libhamlib setup
 #
-set (hamlib_STATIC 1)
-find_package (hamlib 3 REQUIRED)
-find_program (RIGCTL_EXE rigctl)
-find_program (RIGCTLD_EXE rigctld)
+#set (hamlib_STATIC 1)
+#find_package (hamlib 3 REQUIRED)
+#find_program (RIGCTL_EXE rigctl)
+#find_program (RIGCTLD_EXE rigctld)
 
 message (STATUS "hamlib_INCLUDE_DIRS: ${hamlib_INCLUDE_DIRS}")
 message (STATUS "hamlib_LIBRARIES: ${hamlib_LIBRARIES}")
@@ -752,9 +752,9 @@
 #
 
 # Widgets finds its own dependencies.
-find_package (Qt5Widgets 5 REQUIRED)
-find_package (Qt5Multimedia 5 REQUIRED)
-find_package (Qt5PrintSupport 5 REQUIRED)
+#find_package (Qt5Widgets 5 REQUIRED)
+#find_package (Qt5Multimedia 5 REQUIRED)
+#find_package (Qt5PrintSupport 5 REQUIRED)
 
 if (WIN32)
   add_definitions (-DQT_NEEDS_QTMAIN)
@@ -910,19 +910,19 @@
 #
 # stuff only qmake can tell us
 #
-get_target_property (QMAKE_EXECUTABLE Qt5::qmake LOCATION)
-function (QUERY_QMAKE VAR RESULT)
-  exec_program (${QMAKE_EXECUTABLE} ARGS "-query ${VAR}" RETURN_VALUE return_code OUTPUT_VARIABLE output)
-  if (NOT return_code)
-    file (TO_CMAKE_PATH "${output}" output)
-    set (${RESULT} ${output} PARENT_SCOPE)
-  endif (NOT return_code)
-  message (STATUS "Asking qmake for ${RESULT} and got ${output}")
-endfunction (QUERY_QMAKE)
+#get_target_property (QMAKE_EXECUTABLE Qt5::qmake LOCATION)
+#function (QUERY_QMAKE VAR RESULT)
+#  exec_program (${QMAKE_EXECUTABLE} ARGS "-query ${VAR}" RETURN_VALUE return_code OUTPUT_VARIABLE output)
+#  if (NOT return_code)
+#    file (TO_CMAKE_PATH "${output}" output)
+#    set (${RESULT} ${output} PARENT_SCOPE)
+#  endif (NOT return_code)
+#  message (STATUS "Asking qmake for ${RESULT} and got ${output}")
+#endfunction (QUERY_QMAKE)
 
-query_qmake (QT_INSTALL_PLUGINS QT_PLUGINS_DIR)
-query_qmake (QT_INSTALL_IMPORTS QT_IMPORTS_DIR)
-query_qmake (QT_HOST_DATA QT_DATA_DIR)
+#query_qmake (QT_INSTALL_PLUGINS QT_PLUGINS_DIR)
+#query_qmake (QT_INSTALL_IMPORTS QT_IMPORTS_DIR)
+#query_qmake (QT_HOST_DATA QT_DATA_DIR)
 set (QT_MKSPECS_DIR ${QT_DATA_DIR}/mkspecs)
 
 # Tell CMake to run moc when necessary
@@ -976,11 +976,11 @@
 
 
 # UI generation
-qt5_wrap_ui (wsjt_qt_GENUISRCS ${wsjt_qt_UISRCS})
-qt5_wrap_ui (wsjtx_GENUISRCS ${wsjtx_UISRCS})
+#qt5_wrap_ui (wsjt_qt_GENUISRCS ${wsjt_qt_UISRCS})
+#qt5_wrap_ui (wsjtx_GENUISRCS ${wsjtx_UISRCS})
 
 # Resource generation
-qt5_add_resources (wsjtx_RESOURCES_RCC ${CMAKE_BINARY_DIR}/wsjtx.qrc)
+#qt5_add_resources (wsjtx_RESOURCES_RCC ${CMAKE_BINARY_DIR}/wsjtx.qrc)
 
 # AX COM servers
 if (WIN32)
@@ -1020,22 +1020,22 @@
 endif (${OPENMP_FOUND} OR APPLE)
 
 # build a library for the QCustomPlot widget
-add_library (qcp STATIC ${qcp_CXXSRCS})
-target_include_directories (qcp PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/qcustomplot-source>)
-target_link_libraries (qcp Qt5::Widgets Qt5::PrintSupport)
+#add_library (qcp STATIC ${qcp_CXXSRCS})
+#target_include_directories (qcp PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/qcustomplot-source>)
+#target_link_libraries (qcp Qt5::Widgets Qt5::PrintSupport)
 
 # build a library of package Qt functionality
-add_library (wsjt_qt STATIC ${wsjt_qt_CXXSRCS} ${wsjt_qt_GENUISRCS} ${GENAXSRCS})
+#add_library (wsjt_qt STATIC ${wsjt_qt_CXXSRCS} ${wsjt_qt_GENUISRCS} ${GENAXSRCS})
 # set wsjtx_udp exports to static variants
-target_compile_definitions (wsjt_qt PUBLIC UDP_STATIC_DEFINE)
-target_link_libraries (wsjt_qt qcp Qt5::Widgets Qt5::Network)
-target_include_directories (wsjt_qt BEFORE PRIVATE ${hamlib_INCLUDE_DIRS})
+#target_compile_definitions (wsjt_qt PUBLIC UDP_STATIC_DEFINE)
+#target_link_libraries (wsjt_qt qcp Qt5::Widgets Qt5::Network)
+#target_include_directories (wsjt_qt BEFORE PRIVATE ${hamlib_INCLUDE_DIRS})
 if (WIN32)
   target_link_libraries (wsjt_qt Qt5::AxContainer Qt5::AxBase)
 endif (WIN32)
 
-add_library (wsjt_qtmm STATIC ${wsjt_qtmm_CXXSRCS} ${wsjt_qtmm_GENUISRCS})
-target_link_libraries (wsjt_qtmm Qt5::Multimedia)
+#add_library (wsjt_qtmm STATIC ${wsjt_qtmm_CXXSRCS} ${wsjt_qtmm_GENUISRCS})
+#target_link_libraries (wsjt_qtmm Qt5::Multimedia)
 
 add_executable (jt4sim lib/jt4sim.f90 wsjtx.rc)
 target_link_libraries (jt4sim wsjt_fort wsjt_cxx)
@@ -1061,15 +1061,15 @@
 add_executable (jt9code lib/jt9code.f90 wsjtx.rc)
 target_link_libraries (jt9code wsjt_fort wsjt_cxx)
 
-add_executable (wsprcode lib/wsprcode/wsprcode.f90 lib/wsprcode/nhash.c
-	       wsjtx.rc)
+add_executable (wsprcode lib/wsprcode/wsprcode.f90 lib/wsprcode/nhash.c	       wsjtx.rc)
 target_link_libraries (wsprcode wsjt_fort wsjt_cxx)
 
 add_executable (wsprd ${wsprd_CSRCS})
 target_include_directories (wsprd PRIVATE ${FFTW3_INCLUDE_DIRS})
-target_link_libraries (wsprd ${FFTW3_LIBRARIES})
+target_link_libraries (wsprd -lm ${FFTW3_LIBRARIES})
 
 add_executable (wsprsim ${wsprsim_CSRCS})
+target_link_libraries (wsprsim -lm)
 
 add_executable (jt4code lib/jt4code.f90 wsjtx.rc)
 target_link_libraries (jt4code wsjt_fort wsjt_cxx)
@@ -1098,111 +1098,111 @@
 
 add_executable (fmeasure lib/fmeasure.f90 wsjtx.rc)
 
-add_executable (jt9 ${jt9_FSRCS} ${jt9_CXXSRCS} wsjtx.rc)
-if (${OPENMP_FOUND} OR APPLE)
-  if (APPLE)
-    # On  Mac  we don't  have  working  OpenMP  support in  the  C/C++
-    # compilers so we  have to manually set the  correct linking flags
-    # and libraries to get OpenMP support in jt9.
-    set_target_properties (jt9
-      PROPERTIES
-      Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
-      LINK_LIBRARIES "gomp;gcc_s.1" # assume GNU libgcc OpenMP
-      )
-    target_compile_options (jt9
-      PRIVATE
-      $<$<COMPILE_LANGUAGE:Fortran>:-fopenmp>   # assumes GNU style Fortran compiler
-      )
-  else (APPLE)
-    set_target_properties (jt9
-      PROPERTIES
-      COMPILE_FLAGS "${OpenMP_C_FLAGS}"
-      LINK_FLAGS "${OpenMP_C_FLAGS}"
-      Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
-      )
-  endif (APPLE)
-  target_link_libraries (jt9 wsjt_fort_omp wsjt_cxx Qt5::Core)
-else (${OPENMP_FOUND} OR APPLE)
-  target_link_libraries (jt9 wsjt_fort wsjt_cxx Qt5::Core)
-endif (${OPENMP_FOUND} OR APPLE)
+#add_executable (jt9 ${jt9_FSRCS} ${jt9_CXXSRCS} wsjtx.rc)
+#if (${OPENMP_FOUND} OR APPLE)
+#  if (APPLE)
+#    # On  Mac  we don't  have  working  OpenMP  support in  the  C/C++
+#    # compilers so we  have to manually set the  correct linking flags
+#    # and libraries to get OpenMP support in jt9.
+#    set_target_properties (jt9
+#      PROPERTIES
+#      Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
+#      LINK_LIBRARIES "gomp;gcc_s.1" # assume GNU libgcc OpenMP
+#      )
+#    target_compile_options (jt9
+#      PRIVATE
+#      $<$<COMPILE_LANGUAGE:Fortran>:-fopenmp>   # assumes GNU style Fortran compiler
+#      )
+#  else (APPLE)
+#    set_target_properties (jt9
+#      PROPERTIES
+#      COMPILE_FLAGS "${OpenMP_C_FLAGS}"
+#      LINK_FLAGS "${OpenMP_C_FLAGS}"
+#      Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
+#      )
+#  endif (APPLE)
+#  target_link_libraries (jt9 wsjt_fort_omp wsjt_cxx Qt5::Core)
+#else (${OPENMP_FOUND} OR APPLE)
+#  target_link_libraries (jt9 wsjt_fort wsjt_cxx Qt5::Core)
+#endif (${OPENMP_FOUND} OR APPLE)
 
 # build the main application
-add_executable (wsjtx MACOSX_BUNDLE
-  ${wsjtx_CXXSRCS}
-  ${wsjtx_GENUISRCS}
-  wsjtx.rc
-  ${WSJTX_ICON_FILE}
-  ${wsjtx_RESOURCES_RCC}
-  )
+#add_executable (wsjtx MACOSX_BUNDLE
+#  ${wsjtx_CXXSRCS}
+#  ${wsjtx_GENUISRCS}
+#  wsjtx.rc
+#  ${WSJTX_ICON_FILE}
+#  ${wsjtx_RESOURCES_RCC}
+#  )
 
 if (WSJT_CREATE_WINMAIN)
   set_target_properties (wsjtx PROPERTIES WIN32_EXECUTABLE ON)
 endif (WSJT_CREATE_WINMAIN)
 
-set_target_properties (wsjtx PROPERTIES
-  MACOSX_BUNDLE_INFO_STRING "${WSJTX_DESCRIPTION_SUMMARY}"
-  MACOSX_BUNDLE_ICON_FILE "${WSJTX_ICON_FILE}"
-  MACOSX_BUNDLE_BUNDLE_VERSION ${wsjtx_VERSION}
-  MACOSX_BUNDLE_SHORT_VERSION_STRING "v${wsjtx_VERSION}"
-  MACOSX_BUNDLE_LONG_VERSION_STRING "Version ${wsjtx_VERSION}"
-  MACOSX_BUNDLE_BUNDLE_NAME "${PROJECT_NAME}"
-  MACOSX_BUNDLE_COPYRIGHT "${PROJECT_COPYRIGHT}"
-  MACOSX_BUNDLE_GUI_IDENTIFIER "org.k1jt.wsjtx"
-  )
+#set_target_properties (wsjtx PROPERTIES
+#  MACOSX_BUNDLE_INFO_STRING "${WSJTX_DESCRIPTION_SUMMARY}"
+#  MACOSX_BUNDLE_ICON_FILE "${WSJTX_ICON_FILE}"
+#  MACOSX_BUNDLE_BUNDLE_VERSION ${wsjtx_VERSION}
+#  MACOSX_BUNDLE_SHORT_VERSION_STRING "v${wsjtx_VERSION}"
+#  MACOSX_BUNDLE_LONG_VERSION_STRING "Version ${wsjtx_VERSION}"
+#  MACOSX_BUNDLE_BUNDLE_NAME "${PROJECT_NAME}"
+#  MACOSX_BUNDLE_COPYRIGHT "${PROJECT_COPYRIGHT}"
+#  MACOSX_BUNDLE_GUI_IDENTIFIER "org.k1jt.wsjtx"
+#  )
 
-target_include_directories (wsjtx PRIVATE ${FFTW3_INCLUDE_DIRS})
-if (APPLE)
-  target_link_libraries (wsjtx wsjt_fort wsjt_cxx wsjt_qt wsjt_qtmm ${hamlib_LIBRARIES} ${FFTW3_LIBRARIES})
-else ()
-  target_link_libraries (wsjtx wsjt_fort_omp wsjt_cxx wsjt_qt wsjt_qtmm ${hamlib_LIBRARIES} ${FFTW3_LIBRARIES})
-  set_target_properties (wsjtx PROPERTIES
-    COMPILE_FLAGS "${OpenMP_C_FLAGS}"
-    LINK_FLAGS "${OpenMP_C_FLAGS}"
-    Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
-    )
-  if (WIN32)
-    set_target_properties (wsjtx PROPERTIES
-      LINK_FLAGS -Wl,--stack,16777216
-      )
-  endif ()
-endif ()
-qt5_use_modules (wsjtx SerialPort) # not sure why the interface link library syntax above doesn't work
+#target_include_directories (wsjtx PRIVATE ${FFTW3_INCLUDE_DIRS})
+#if (APPLE)
+#  target_link_libraries (wsjtx wsjt_fort wsjt_cxx wsjt_qt wsjt_qtmm ${hamlib_LIBRARIES} ${FFTW3_LIBRARIES})
+#else ()
+#  target_link_libraries (wsjtx wsjt_fort_omp wsjt_cxx wsjt_qt wsjt_qtmm ${hamlib_LIBRARIES} ${FFTW3_LIBRARIES})
+#  set_target_properties (wsjtx PROPERTIES
+#    COMPILE_FLAGS "${OpenMP_C_FLAGS}"
+#    LINK_FLAGS "${OpenMP_C_FLAGS}"
+#    Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/fortran_modules_omp
+#    )
+#  if (WIN32)
+#    set_target_properties (wsjtx PROPERTIES
+#      LINK_FLAGS -Wl,--stack,16777216
+#      )
+#  endif ()
+#endif ()
+#qt5_use_modules (wsjtx SerialPort) # not sure why the interface link library syntax above doesn't work
 
 # make a library for WSJT-X UDP servers
 # add_library (wsjtx_udp SHARED ${UDP_library_CXXSRCS})
-add_library (wsjtx_udp-static STATIC ${UDP_library_CXXSRCS})
+#add_library (wsjtx_udp-static STATIC ${UDP_library_CXXSRCS})
 #target_include_directories (wsjtx_udp
 #  INTERFACE
 #  $<INSTALL_INTERFACE:${WSJT_INCLUDE_DESTINATION}/wsjtx>
 #  )
-target_include_directories (wsjtx_udp-static
-  INTERFACE
-  $<INSTALL_INTERFACE:${WSJT_INCLUDE_DESTINATION}/wsjtx>
-  )
+#target_include_directories (wsjtx_udp-static
+#  INTERFACE
+#  $<INSTALL_INTERFACE:${WSJT_INCLUDE_DESTINATION}/wsjtx>
+#  )
 #set_target_properties (wsjtx_udp PROPERTIES
 #  PUBLIC_HEADER "${UDP_library_HEADERS}"
 #  )
-set_target_properties (wsjtx_udp-static PROPERTIES
-  OUTPUT_NAME wsjtx_udp
-  )
-target_compile_definitions (wsjtx_udp-static PUBLIC UDP_STATIC_DEFINE)
+#set_target_properties (wsjtx_udp-static PROPERTIES
+#  OUTPUT_NAME wsjtx_udp
+#  )
+#target_compile_definitions (wsjtx_udp-static PUBLIC UDP_STATIC_DEFINE)
 #qt5_use_modules (wsjtx_udp Network)
-qt5_use_modules (wsjtx_udp-static Network)
-generate_export_header (wsjtx_udp-static BASE_NAME udp)
+#qt5_use_modules (wsjtx_udp-static Network)
+#generate_export_header (wsjtx_udp-static BASE_NAME udp)
 
-add_executable (udp_daemon UDPExamples/UDPDaemon.cpp UDPExamples/udp_daemon.rc ${WSJTX_ICON_FILE})
-target_link_libraries (udp_daemon wsjtx_udp-static)
+#add_executable (udp_daemon UDPExamples/UDPDaemon.cpp UDPExamples/udp_daemon.rc ${WSJTX_ICON_FILE})
+#target_link_libraries (udp_daemon wsjtx_udp-static)
 
-add_resources (message_aggregator_RESOURCES /qss ${message_aggregator_STYLESHEETS})
-configure_file (UDPExamples/message_aggregator.qrc.in message_aggregator.qrc @ONLY)
-qt5_add_resources (message_aggregator_RESOURCES_RCC ${CMAKE_CURRENT_BINARY_DIR}/message_aggregator.qrc)
-add_executable (message_aggregator
-  ${message_aggregator_CXXSRCS}
-  ${WSJTX_ICON_FILE}
-  UDPExamples/message_aggregator.rc
-  ${message_aggregator_RESOURCES_RCC}
-  )
-target_link_libraries (message_aggregator Qt5::Widgets wsjtx_udp-static)
+#add_resources (message_aggregator_RESOURCES /qss ${message_aggregator_STYLESHEETS})
+#configure_file (UDPExamples/message_aggregator.qrc.in message_aggregator.qrc @ONLY)
+#qt5_add_resources (message_aggregator_RESOURCES_RCC ${CMAKE_CURRENT_BINARY_DIR}/message_aggregator.qrc)
+#add_executable (message_aggregator
+#  ${message_aggregator_CXXSRCS}
+#  ${WSJTX_ICON_FILE}
+#  UDPExamples/message_aggregator.rc
+#  ${message_aggregator_RESOURCES_RCC}
+#  )
+#target_link_libraries (message_aggregator Qt5::Widgets wsjtx_udp-static)
 
 if (WSJT_CREATE_WINMAIN)
   set_target_properties (message_aggregator PROPERTIES WIN32_EXECUTABLE ON)
@@ -1215,7 +1215,7 @@
   endif (NOT WSJT_SKIP_MANPAGES)
   if (NOT APPLE)
     add_subdirectory (debian)
-    add_dependencies (wsjtx debian)
+#    add_dependencies (wsjtx debian)
   endif (NOT APPLE)
 endif (UNIX)
 
@@ -1222,10 +1222,10 @@
 #
 # installation
 #
-install (TARGETS wsjtx
-  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
-  BUNDLE DESTINATION . COMPONENT runtime
-  )
+#install (TARGETS wsjtx
+#  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
+#  BUNDLE DESTINATION . COMPONENT runtime
+#  )
 
 # install (TARGETS wsjtx_udp EXPORT udp
 #   RUNTIME DESTINATION ${WSJT_BIN_DESTINATION}
@@ -1244,48 +1244,48 @@
 #   DESTINATION ${WSJT_LIB_DESTINATION}/cmake/wsjtx
 #   )
 
-install (TARGETS udp_daemon message_aggregator
-  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
-  BUNDLE DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
-  )
+#install (TARGETS udp_daemon message_aggregator
+#  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
+#  BUNDLE DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
+#  )
 
-install (TARGETS jt9 jt65code qra64code qra64sim jt9code jt4code
-  msk144code wsprd fmtave fcal fmeasure
-  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
-  BUNDLE DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
-  )
+#install (TARGETS jt9 jt65code qra64code qra64sim jt9code jt4code
+#  msk144code wsprd fmtave fcal fmeasure
+#  RUNTIME DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
+#  BUNDLE DESTINATION ${WSJT_BIN_DESTINATION} COMPONENT runtime
+#  )
 
-install (PROGRAMS
-  ${RIGCTL_EXE}
-  DESTINATION ${WSJT_BIN_DESTINATION}
-  #COMPONENT runtime
-  RENAME rigctl-wsjtx${CMAKE_EXECUTABLE_SUFFIX}
-  )
+#install (PROGRAMS
+#  ${RIGCTL_EXE}
+#  DESTINATION ${WSJT_BIN_DESTINATION}
+#  #COMPONENT runtime
+#  RENAME rigctl-wsjtx${CMAKE_EXECUTABLE_SUFFIX}
+#  )
 
-install (PROGRAMS
-  ${RIGCTLD_EXE}
-  DESTINATION ${WSJT_BIN_DESTINATION}
-  #COMPONENT runtime
-  RENAME rigctld-wsjtx${CMAKE_EXECUTABLE_SUFFIX}
-  )
+#install (PROGRAMS
+#  ${RIGCTLD_EXE}
+#  DESTINATION ${WSJT_BIN_DESTINATION}
+#  #COMPONENT runtime
+#  RENAME rigctld-wsjtx${CMAKE_EXECUTABLE_SUFFIX}
+#  )
 
-install (FILES
-  README
-  COPYING
-  AUTHORS
-  THANKS
-  NEWS
-  INSTALL
-  BUGS
-  DESTINATION ${WSJT_SHARE_DESTINATION}/${WSJT_DOC_DESTINATION}
-  #COMPONENT runtime
-  )
+#install (FILES
+#  README
+#  COPYING
+#  AUTHORS
+#  THANKS
+#  NEWS
+#  INSTALL
+#  BUGS
+#  DESTINATION ${WSJT_SHARE_DESTINATION}/${WSJT_DOC_DESTINATION}
+#  #COMPONENT runtime
+#  )
 
-install (FILES
-  contrib/Ephemeris/JPLEPH
-  DESTINATION ${WSJT_SHARE_DESTINATION}/${WSJT_DATA_DESTINATION}
-  #COMPONENT runtime
-  )
+#install (FILES
+#  contrib/Ephemeris/JPLEPH
+#  DESTINATION ${WSJT_SHARE_DESTINATION}/${WSJT_DATA_DESTINATION}
+#  #COMPONENT runtime
+#  )
 
 #
 # Mac installer files
@@ -1320,7 +1320,7 @@
 # explicitly say that the wsjt_qt depends on custom target, this is
 # done indirectly so that the revisiontag target gets built exactly
 # once per build
-add_dependencies(wsjt_qt revisiontag)
+#add_dependencies(wsjt_qt revisiontag)
 
 
 #
@@ -1353,8 +1353,8 @@
 #
 if (NOT is_debug_build)
 
-  get_target_property (QtCore_location Qt5::Core LOCATION)
-  get_filename_component (QtCore_location ${QtCore_location} PATH)
+  #get_target_property (QtCore_location Qt5::Core LOCATION)
+  #get_filename_component (QtCore_location ${QtCore_location} PATH)
   list (APPEND fixup_library_dirs ${QtCore_location})
 
   if (APPLE)
Index: lib/decode65a.f90
===================================================================
--- lib/decode65a.f90	(revision 7579)
+++ lib/decode65a.f90	(working copy)
@@ -88,6 +88,7 @@
         if(i.gt.256) jj=i-512
         s1(jj,k)=real(c5a(i))**2 + aimag(c5a(i))**2
      enddo
+     call sleep_msec(0)
   enddo
   call timer('sh_ffts ',1)
 
@@ -142,6 +143,7 @@
      endif
      if(qual.lt.qual0) exit
      qual0=qual
+     call sleep_msec(0)
   enddo
 
   if(nft.eq.2) then
Index: lib/jt65.f90
===================================================================
--- lib/jt65.f90	(revision 7579)
+++ lib/jt65.f90	(working copy)
@@ -63,9 +63,18 @@
         if( mode .eq. 'b' .or. mode .eq. 'B' ) then
           nsubmode=1
         endif
-        if( mode .eq. 'c' .or. mode .eq. 'C' ) then
-          nsubmode=2
+        if( mode .eq. '1' ) then
+          nsubmode=100
         endif
+        if( mode .eq. '2' ) then
+          nsubmode=101
+        endif
+        if( mode .eq. '3' ) then
+          nsubmode=102
+        endif
+        if( mode .eq. '4' ) then
+          nsubmode=103
+        endif
      case ('n')
         read (optarg(:narglen), *) ntrials
      case ('r')
Index: lib/sync64.f90
===================================================================
--- lib/sync64.f90	(revision 7579)
+++ lib/sync64.f90	(working copy)
@@ -114,6 +114,7 @@
         f0=ip*df3
      endif
      call timer('sync64_2',1)
+     call sleep_msec(0)
   enddo
 
   s0a=s0a+2.0
